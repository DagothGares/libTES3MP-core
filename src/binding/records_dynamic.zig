//! Raw bindings for the functions declared by TES3MP's RecordsDynamic.hpp file.

const binding = @import("../binding.zig");

const c_str = binding.c_str;

pub export var zigClearRecords: *const fn () callconv(.C) void = &binding.ub_fn;
pub export var zigAddRecord: *const fn () callconv(.C) void = &binding.ub_fn;
pub export var zigGetRecordType: *const fn () callconv(.C) c_ushort = &binding.ub_fn;
pub export var zigSetRecordType: *const fn (c_uint) callconv(.C) void = &binding.ub_fn_uint;
pub export var zigGetRecordCount: *const fn () callconv(.C) c_uint = &binding.ub_fn;
pub export var zigGetRecordId: *const fn (c_uint) callconv(.C) c_str = &binding.ub_fn_uint;
pub export var zigSetRecordId: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigGetRecordBaseId: *const fn (c_uint) callconv(.C) c_str = &binding.ub_fn_uint;
pub export var zigSetRecordBaseId: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordInventoryItemCount: *const fn (c_uint) callconv(.C) void = &binding.ub_fn_uint;
pub export var zigSetRecordInventoryItemId: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordInventoryBaseId: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigGetRecordSubtype: *const fn (c_uint) callconv(.C) c_int = &binding.ub_fn_uint;
pub export var zigSetRecordSubtype: *const fn (c_uint) callconv(.C) void = &binding.ub_fn_uint;

// Data functions (TODO: split this crap up)
pub export var zigGetRecordName: *const fn (c_uint) callconv(.C) c_str = &binding.ub_fn_uint;
pub export var zigSetRecordName: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigGetRecordModel: *const fn (c_uint) callconv(.C) c_str = &binding.ub_fn_uint;
pub export var zigSetRecordModel: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigGetRecordIcon: *const fn (c_uint) callconv(.C) c_str = &binding.ub_fn_uint;
pub export var zigSetRecordIcon: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigGetRecordScript: *const fn (c_uint) callconv(.C) c_str = &binding.ub_fn_uint;
pub export var zigSetRecordScript: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigGetRecordEnchantmentId: *const fn (c_uint) callconv(.C) c_str = &binding.ub_fn_uint;
pub export var zigSetRecordEnchantmentId: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigGetRecordEnchantmentCharge: *const fn (c_uint) callconv(.C) c_int = &binding.ub_fn_uint;
pub export var zigSetRecordEnchantmentCharge: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordAutoCalc: *const fn (c_uint) callconv(.C) c_int = &binding.ub_fn_uint;
pub export var zigSetRecordAutoCalc: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordCharge: *const fn (c_uint) callconv(.C) c_int = &binding.ub_fn_uint;
pub export var zigSetRecordCharge: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordCost: *const fn (c_uint) callconv(.C) c_int = &binding.ub_fn_uint;
pub export var zigSetRecordCost: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordFlags: *const fn (c_uint) callconv(.C) c_int = &binding.ub_fn_uint;
pub export var zigSetRecordFlags: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordValue: *const fn (c_uint) callconv(.C) c_int = &binding.ub_fn_uint;
pub export var zigSetRecordValue: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordWeight: *const fn (c_uint) callconv(.C) f64 = &binding.ub_fn_uint;
pub export var zigSetRecordWeight: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigGetRecordQuantity: *const fn (c_uint) callconv(.C) c_uint = &binding.ub_fn_uint;
pub export var zigSetRecordQuality: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordUses: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordTime: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordRadius: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordColor: *const fn (c_uint, c_uint, c_uint) callconv(.C) void = &binding.ub_fn_3uint;
pub export var zigSetRecordArmorRating: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordHealth: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordDamageChop: *const fn (c_uint, c_uint) callconv(.C) void = &binding.ub_fn_2uint;
pub export var zigSetRecordDamageSlash: *const fn (c_uint, c_uint) callconv(.C) void = &binding.ub_fn_2uint;
pub export var zigSetRecordDamageThrust: *const fn (c_uint, c_uint) callconv(.C) void = &binding.ub_fn_2uint;
pub export var zigSetRecordReach: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordSpeed: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordKeyState: *const fn (bool) callconv(.C) void = &binding.ub_fn_bool;
pub export var zigSetRecordScrollState: *const fn (bool) callconv(.C) void = &binding.ub_fn_bool;
pub export var zigSetRecordSkillId: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordText: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordHair: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordHead: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordGender: *const fn (c_uint) callconv(.C) void = &binding.ub_fn_uint;
pub export var zigSetRecordRace: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordClass: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordFaction: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordScale: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordBloodType: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordVampireState: *const fn (bool) callconv(.C) void = &binding.ub_fn_bool;
pub export var zigSetRecordLevel: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordMagicka: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordFatigue: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordSoulValue: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordAIFight: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordAIFlee: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordAIAlarm: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordAIServices: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordSound: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordVolume: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordMinRange: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordMaxRange: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordOpenSound: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordCloseSound: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordScriptText: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordIntegerVariable: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigSetRecordFloatVariable: *const fn (f64) callconv(.C) void = &binding.ub_fn_f64;
pub export var zigSetRecordStringVariable: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordIdByIndex: *const fn (c_uint, c_str) callconv(.C) void = &binding.ub_fn_uint_str;
pub export var zigSetRecordEnchantmentIdByIndex: *const fn (c_uint, c_str) callconv(.C) void = &binding.ub_fn_uint_str;
pub export var zigSetRecordBodyPartType: *const fn (c_uint) callconv(.C) void = &binding.ub_fn_uint;
pub export var zigSetRecordBodyPartIdForMale: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;
pub export var zigSetRecordBodyPartIdForFemale: *const fn (c_str) callconv(.C) void = &binding.ub_fn_str;

// Effect functions
pub export var zigGetRecordEffectCount: *const fn (c_uint) callconv(.C) c_uint = &binding.ub_fn_uint;
pub export var zigGetRecordEffectId: *const fn (c_uint, c_uint) callconv(.C) c_uint = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectId: *const fn (c_uint) callconv(.C) void = &binding.ub_fn_uint;
pub export var zigGetRecordEffectAttribute: *const fn (c_uint, c_uint) callconv(.C) c_int = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectAttribute: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordEffectSkill: *const fn (c_uint, c_uint) callconv(.C) c_int = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectSkill: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordEffectRangeType: *const fn (c_uint, c_uint) callconv(.C) c_uint = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectRangeType: *const fn (c_uint) callconv(.C) void = &binding.ub_fn_uint;
pub export var zigGetRecordEffectArea: *const fn (c_uint, c_uint) callconv(.C) c_int = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectArea: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordEffectDuration: *const fn (c_uint, c_uint) callconv(.C) c_int = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectDuration: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordEffectMagnitudeMax: *const fn (c_uint, c_uint) callconv(.C) c_int = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectMagnitudeMax: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigGetRecordEffectMagnitudeMin: *const fn (c_uint, c_uint) callconv(.C) c_int = &binding.ub_fn_2uint;
pub export var zigSetRecordEffectMagnitudeMin: *const fn (c_int) callconv(.C) void = &binding.ub_fn_int;
pub export var zigAddRecordEffect: *const fn () callconv(.C) void = &binding.ub_fn;

// misc functions (NOTE: temp, probably)
pub export var zigAddRecordBodyPart: *const fn () callconv(.C) void = &binding.ub_fn;
pub export var zigAddRecordInventoryItem: *const fn () callconv(.C) void = &binding.ub_fn;
pub export var zigSendRecordDynamic: *const fn (c_ushort, bool, bool) callconv(.C) void = &binding.ub_fn_ushort_2bool;
